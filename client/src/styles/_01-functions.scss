/* Calculare rem value from px */
@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: rem($size);
}

/* create horizontal inline list
* @example:
* ul {
*   $include inlineList();
* }
 */
@mixin inlineList{
  li {
    display: inline;
  }
  a{
    display: inline-block;
  }
}

/* default styles for navigations
* @example:
* .myNav {
*   $include nav();
* }
 */
@mixin nav {
  li{
    a{
      @include font-size($menu-font-size-small);
      color: $color-grey-light;
      padding-left: $menu-h-padding;
    }
    &:hover, &.active{
      a{
        color: $color-white;
      }
    }
  }
}

@mixin container($width){
  @include center($width);
}

@mixin col-styles {
  box-sizing: border-box;
  border: 1px solid #ededed;
  margin-bottom: 10px;
}




@mixin standardText() {
  color: $color-black;
  font-family: 'Quattrocento Sans', sans-serif;
  font-size: 1rem;
  font-style: normal;
  font-weight: 400;
  line-height: 1.714;
}

@mixin standardTextBold() {
  color: $color-black;
  font-family: 'Quattrocento Sans', sans-serif;
  font-size: 1rem;
  font-style: normal;
  font-weight: 700;
  line-height: 1.714;
}

@mixin mainNavigationText() {
  font-family: 'Quattrocento Sans', sans-serif;
  font-size: 1.143rem;
  font-weight: 700;
}

@mixin fullFit($position: null) {
  @if ($position) {
    position: $position;
    left: 0;
    top: 0;
    z-index: 100;
  }
  width: 100%;
  height: 100%;
}

@mixin clearAfter() {
  &:after {
    content: '';
    display: block;
    clear: both;
  }
}

@mixin appearFancy() {
  &:hover {
    ul {
      opacity: 1;
      visibility: visible;
      margin-top: 0;
    }
    li {
      animation: fadeIn 0.5s ease 0s forwards;
    }
    @for $i from 1 through 20 {
      li:nth-child(#{$i}) {
        animation-delay: 0.05s * $i;
      }
    }
  }
  ul {
    opacity: 0;
    margin-top: -20px;
    transition: margin 0.3s, opacity 0.3s;
    visibility: hidden;
    transform: none;
  }
  li {
    opacity: 0;
  }
}

// Provides a simplified syntax for chaining media queries across named or numeric breakpoints
@mixin responsive($properties, $default-value, $responsive-values){


  // Apply default property values
  @each $property in $properties {
    #{$property}: #{$default-value};
  }

  @each $breakpoint, $value in $responsive-values{
    // Fallback to min-width media queries
    @media screen and (min-width: $breakpoint) {
      @each $property in $properties {
        #{$property}: #{$value};
      }
    }
  }
}

@keyframes fadeIn {
  0%{opacity: 0}
  100%{opacity: 1}
}
